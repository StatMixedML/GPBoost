}else{
b_pred = pred_GPB$random_effect_mean
}
pred_GPB_total = pred_GPB$fixed_effect+pred_GPB$random_effect_mean
results[ind_start_new_res+8,"RMSE"]=sqrt(mean((y_test_in-pred_GPB_total)^2))
results[ind_start_new_res+8,"CRPS"]=mean(crps(y=y_test_in, family="normal",mean=pred_GPB_total,sd=sqrt(diag(pred_GPB$random_effect_cov))))
results[ind_start_new_res+8,"RMSE_F"]=sqrt(mean((f_test_in-pred_GPB$fixed_effect)^2))
results[ind_start_new_res+8,"RMSE_b"]=sqrt(mean((b_in-b_pred)^2))
results[ind_start_new_res+8,"RMSE_new"]=sqrt(mean((y_test_out-pred_GPB_out$fixed_effect)^2))
results[ind_start_new_res+8,"CRPS_new"]=mean(crps(y=y_test_out, family="normal",mean=pred_GPB_out$fixed_effect,sd=sqrt(diag(pred_GPB_out$random_effect_cov))))
results[ind_start_new_res+8,"time"]=as.numeric(t2-t1, units = "secs")
results[ind_start_new_res+8,"M"] = gpb_n_iter
print("********** GPBoost finshed ********** ")
}
#############
## F known ##
#############
if(run_which[2]){
# lr_par=0.01
# num_neighbors=15
# maxit_cov=1000
# NesterovAcc=TRUE
# acc_rate_cov=0.5
# gp_params = list(trace = TRUE,use_nesterov_acc=TRUE,
#           acc_rate_cov=0.5, maxit = maxit_cov,
#           lr_cov = lr_par, delta_rel_conv=delta_rel_conv_par,
#           optimizer_cov = 0, optimizer_coef = 1, momentum_offset=3, nesterov_schedule_version=0)
gp_model_F_known <- gpb.GPModel(group_data = group, gp_coords = coords, cluster_ids=gp_id,
vecchia_approx = vecchia_approx, num_neighbors = num_neighbors,
vecchia_pred_type = vecchia_pred_type)
t1=Sys.time()
gp_model_F_known$fit(y=sim$eps[sim$ind_train]+sim$xi[sim$ind_train],params=gp_params)
t2=Sys.time()
##Estimated parameters
par_est_F_known <- gp_model_F_known$get_cov_pars()
par_est = par_est_F_known[1:2]
if(RE_type=="spatial") par_est=c(par_est,par_est_F_known[3])
##MSE at existing RE points
pred_F_konwn <- gp_model_F_known$predict(group_data_pred=group_test_in,gp_coords_pred=coords_test_in,cluster_ids_pred=gp_id_in,predict_cov_mat=TRUE)
if(RE_type=="one_way"){
b_pred = pred_F_konwn$mu[0:(m*n_gp_ids-1)*ntest/m+1]
}else{
b_pred = pred_F_konwn$mu
}
y_pred_in = f_test_in+pred_F_konwn$mu
pred_F_konwn_out <- gp_model_F_known$predict(group_data_pred=group_test_out,gp_coords_pred=coords_test_out,cluster_ids_pred=gp_id_out,predict_cov_mat=TRUE)
# vecchia_approx = TRUE
# num_neighbors = 500
# # vecchia_pred_type = "order_pred_first"
# vecchia_pred_type = "order_obs_first_cond_obs_only"
#
# gp_model_F_known <- gpb.GPModel(group_data = group, gp_coords = coords, cluster_ids=gp_id,
#                                 vecchia_approx = vecchia_approx, num_neighbors = num_neighbors,
#                                 vecchia_pred_type = vecchia_pred_type)
# pred_F_konwn <- gp_model_F_known$predict(y=sim$eps[sim$ind_train]+sim$xi[sim$ind_train],cov_par=par_true,
#                                          group_data_pred=group_test_in,gp_coords_pred=coords_test_in,cluster_ids_pred=gp_id_in)$mu
#
# if(RE_type=="one_way"){
#   b_pred = pred_F_konwn[0:(m-1)*n/m+1]
# }else{
#   b_pred = pred_F_konwn
# }
# y_pred_in = f_test_in+pred_F_konwn
# sqrt(mean((y_test_in-y_pred_in)^2))
results[ind_start_new_res+2,parnames]=par_est
results[ind_start_new_res+2,"Method"]="F_known"
results[ind_start_new_res+2,"time"]=as.numeric(t2-t1, units = "secs")
results[ind_start_new_res+2,"RMSE"]=sqrt(mean((y_test_in-y_pred_in)^2))
results[ind_start_new_res+2,"CRPS"]=mean(crps(y=y_test_in, family="normal",mean=y_pred_in,sd=sqrt(diag(pred_F_konwn$cov))))
results[ind_start_new_res+2,"RMSE_F"]=NA
results[ind_start_new_res+2,"RMSE_b"]=sqrt(mean((b_in-b_pred)^2))
results[ind_start_new_res+2,"RMSE_new"]=sqrt(mean((y_test_out-sim$f[sim$ind_out])^2))
results[ind_start_new_res+2,"CRPS_new"]=mean(crps(y=y_test_out, family="normal",mean=sim$f[sim$ind_out],sd=sqrt(diag(pred_F_konwn_out$cov))))
print("********** F_known finshed ********** ")
}
##############
## Linear F ##
##############
if(run_which[3]){
gp_model_F_linear <- gpb.GPModel(group_data = group, gp_coords = coords, cluster_ids=gp_id,
vecchia_approx = vecchia_approx, num_neighbors = num_neighbors,
vecchia_pred_type = vecchia_pred_type)
t1=Sys.time()
gp_model_F_linear$fit(y=y,X=cbind(rep(1,dim(X)[1]),X),params=gp_params)
t2=Sys.time()
##Estimated parameters
par_est_F_linear <- gp_model_F_linear$get_cov_pars()
par_est = par_est_F_linear[1:2]
if(RE_type=="spatial") par_est=c(par_est,par_est_F_linear[3])
##MSE at existing RE points
pred_F_linear <- gp_model_F_linear$predict(X_pred = X_test_in_1,group_data_pred=group_test_in,
gp_coords_pred=coords_test_in,cluster_ids_pred=gp_id_in,predict_cov_mat=TRUE)
pred_F_linear_out <- gp_model_F_linear$predict(X_pred=X_test_out_1,
group_data_pred=group_test_out,gp_coords_pred=coords_test_out,cluster_ids_pred=gp_id_out,predict_cov_mat=TRUE)
pred_F_linear_FE = X_test_in_1%*%t(t(gp_model_F_linear$get_coef()))
b_pred <- pred_F_linear$mu-pred_F_linear_FE
if(RE_type=="one_way"){
b_pred = b_pred[0:(m*n_gp_ids-1)*ntest/m+1]
}
results[ind_start_new_res+3,parnames]=par_est
results[ind_start_new_res+3,"Method"]="F_linear"
results[ind_start_new_res+3,"RMSE"]=sqrt(mean((y_test_in-pred_F_linear$mu)^2))
results[ind_start_new_res+3,"CRPS"]=mean(crps(y=y_test_in, family="normal",mean=pred_F_linear$mu,sd=sqrt(diag(pred_F_linear$cov))))
results[ind_start_new_res+3,"RMSE_F"]=sqrt(mean((f_test_in-pred_F_linear_FE)^2))
results[ind_start_new_res+3,"RMSE_b"]=sqrt(mean((b_in-b_pred)^2))
results[ind_start_new_res+3,"RMSE_new"]=sqrt(mean((y_test_out-pred_F_linear_out$mu)^2))
results[ind_start_new_res+3,"CRPS_new"]=mean(crps(y=y_test_out, family="normal",mean=pred_F_linear_out$mu,sd=sqrt(diag(pred_F_linear_out$cov))))
results[ind_start_new_res+3,"time"]=as.numeric(t2-t1, units = "secs")
print("********** F_linear finshed ********** ")
}
###################
## Tree boosting ##
###################
if(run_which[4]){
if(RE_type=="one_way"){
if(one_hot_dummy){
Z=as.matrix(t(lme4::lFormula(formula=y ~ 1 + (1 | group),data=data.frame(group=as.integer(group)))$reTrms$Zt))
Xb = cbind(X,Z)
Xb_test_in1 = cbind(X_test_in,Z[sim$ind_in-n,])
Xb_test_in2 = cbind(X_test_in,matrix(NA,ncol=dim(Z)[2],nrow=dim(Z)[1]))
Xb_test_out1 = cbind(X_test_out,matrix(NA,ncol=length(unique(group)),nrow=dim(X_test_out)[1]))
colnames(Xb)=colnames(Xb_test_in1)=colnames(Xb_test_in2)=colnames(Xb_test_out1)=NULL
}else{
Xb = cbind(as.integer(group),X)
Xb_test_in1 = cbind(as.integer(group_test_in),X_test_in)
Xb_test_in2 = cbind(rep(NA,dim(X_test_in)[1]),X_test_in)
Xb_test_out1 = cbind(rep(NA,dim(X_test_out)[1]),X_test_out)
# Xb = data_train[,-1]
# Xb_test_in1 = newdata_in[,-1]
# Xb_test_in2 <- Xb_test_in1
# Xb_test_in2$group = NA
# Xb_test_out1 = newdata_out[,-1]
# Xb_test_out1$group = NA
}
}else if(RE_type=="spatial"){
Xb = cbind(coords,X)
Xb_test_in1 = cbind(coords_test_in,X_test_in)
Xb_test_in2 = cbind(matrix(NA,ncol=2,nrow=dim(X_test_in)[1]),X_test_in)
Xb_test_out1 = cbind(matrix(NA,ncol=2,nrow=dim(X_test_out)[1]),X_test_out)
# Xb = data_train[,-1]
# Xb_test_in1 = newdata_in[,-1]
# Xb_test_in2 <- Xb_test_in1
# Xb_test_in2[,c("s_x","s_y")] = NA
# Xb_test_out1 = newdata_out[,-1]
# Xb_test_out1[,c("s_x","s_y")] = NA
}
# Xb = as.matrix(Xb)
# storage.mode(Xb) <- "numeric"
# Xb_test_in1 = as.matrix(Xb_test_in1)
# storage.mode(Xb_test_in1) <- "numeric"
# Xb_test_in2 = as.matrix(Xb_test_in2)
# storage.mode(Xb_test_in2) <- "numeric"
# Xb_test_out1 = as.matrix(Xb_test_out1)
# storage.mode(Xb_test_out1) <- "numeric"
# if(RE_type=="one_way"){
#   storage.mode(Xb[,1]) <- "integer"
#   storage.mode(Xb_test_in1[,1]) <- "integer"
#   storage.mode(Xb_test_in2[,1]) <- "integer"
#   storage.mode(Xb_test_out1[,1]) <- "integer"
# }
if(use_XGBoost){
Mboost=M
test_rmse=rep(0,Mboost)
folds = cut(seq(1,n),breaks=4,labels=FALSE)
for(cvi in 1:4){
indtest=(folds==cvi)
dtrain <- xgb.DMatrix(data = Xb[!indtest,], label=y[!indtest])
dtest <- xgb.DMatrix(data = Xb[indtest,], label=y[indtest])
params=list(lambda =0, max_depth = maxdepth,min_child_weigth = minbucket,
tree_method="exact",updater="grow_colmaker",eta=0.01)
watchlist <- list(train=dtrain, test=dtest)
xgb=xgb.train(data=dtrain,nrounds = Mboost, params = params,verbose = 0,watchlist=watchlist)
test_rmse = test_rmse + xgb$evaluation_log$test_rmse
}
boost_n_iter=which.min(test_rmse)
dtrain <- xgb.DMatrix(data = Xb, label=y)
t1=Sys.time()
boost_model=xgb.train(data=dtrain,nrounds = boost_n_iter, params = params,verbose = 0)
t2=Sys.time()
}else{
if(RE_type=="one_way"){
if(one_hot_dummy){
dtrain <- lgb.Dataset(Xb, label = y, free_raw_data=FALSE,colnames=1:dim(Xb)[2])
}else{
dtrain <- lgb.Dataset(Xb, label = y, free_raw_data=FALSE,colnames=1:dim(Xb)[2],categorical_feature=1)
}
}else{
dtrain <- lgb.Dataset(Xb, label = y, free_raw_data=FALSE)
}
params <- list(objective = "regression", metric = "l2", has_gp_model = FALSE, use_nesterov_acc = NesterovBoost)
set.seed(1)
boost_model <- lgb.cv(params = params, data = dtrain,
nrounds = M, nfold = 4,early_stopping_rounds = 5, verbose=0, showsd = FALSE,
min_data_in_leaf = opt_params[opt_params$model=="boost","min_dat_leaf"],
max_depth = opt_params[opt_params$model=="boost","max_depth"],
learning_rate = opt_params[opt_params$model=="boost","lr"])
boost_n_iter <- boost_model$best_iter
t1=Sys.time()
boost_model <- lgb.train(params=params,data=dtrain,nrounds=boost_n_iter,verbose = 0,
min_data_in_leaf = opt_params[opt_params$model=="boost","min_dat_leaf"],
max_depth = opt_params[opt_params$model=="boost","max_depth"],
learning_rate = opt_params[opt_params$model=="boost","lr"])
t2=Sys.time()
}
##Estimated parameters
sigma2hatBoost=var(y-predict(boost_model, Xb))
sigmahatBoost=sqrt(sigma2hatBoost)
results[ind_start_new_res+4,"sigma2"]=sigma2hatBoost
results[ind_start_new_res+4,"Method"]="Tree-Boost"
results[ind_start_new_res+4,"RMSE"]=sqrt(mean((y_test_in-predict(boost_model, Xb_test_in1))^2))
results[ind_start_new_res+4,"CRPS"]=mean(crps(y=y_test_in, family="normal",mean=predict(boost_model, Xb_test_in1),sd=rep(sigmahatBoost,length(y_test_in))))
results[ind_start_new_res+4,"RMSE_F"]=sqrt(mean((f_test_in-predict(boost_model, Xb_test_in2))^2))
results[ind_start_new_res+4,"RMSE_new"]=sqrt(mean((y_test_out-predict(boost_model, Xb_test_out1))^2))
results[ind_start_new_res+4,"CRPS_new"]=mean(crps(y=y_test_out, family="normal",mean=predict(boost_model, Xb_test_out1),sd=rep(sigmahatBoost,length(y_test_out))))
results[ind_start_new_res+4,"time"]=as.numeric(t2-t1, units = "secs")
results[ind_start_new_res+4,"M"] = boost_n_iter
print("********** Tree-Boost finshed ********** ")
}
############
## mboost ##
############
if(run_which[5]){
if(RE_type=="one_way"){
df=4
formula = as.formula(paste0("y ~ brandom(group, df = ",df,") + btree(",paste(varnames, collapse = ','),
",tree_controls = partykit::ctree_control(minsplit = 2, minbucket =",opt_params[opt_params$model=="mboost","min_dat_leaf"],
",maxdepth = ",opt_params[opt_params$model=="mboost","max_depth"],"))"))# formula = as.formula(paste0("y ~ brandom(group, df = NULL, lambda = ",lambda,") + btree(",paste(varnames, collapse = ','),")"))
}else if(RE_type=="spatial"){
df=6
formula = as.formula(paste0("y ~ bspatial(s_x,s_y, df = ",df,") + btree(",paste(varnames, collapse = ','),
",tree_controls = partykit::ctree_control(minsplit = 2, minbucket =",opt_params[opt_params$model=="mboost","min_dat_leaf"],
",maxdepth = ",opt_params[opt_params$model=="mboost","max_depth"],"))"))
}
mod_mboost <- mboost(formula, data = data_train,control = boost_control(mstop=M,nu=opt_params[opt_params$model=="mboost","lr"]))
set.seed(1)
cv_mb=cvrisk(mod_mboost,folds=cv(model.weights(mod_mboost),type="kfold",B=4))
# plot(cv_mb)
# mstop(cv_mb)
# plot(mod_mboost)
# summary(mod_mboost)
# mod_mboost[mstop(cv_mb)]##This is faster as it does not require refitting, but the computational time is then not accurately measured
t1=Sys.time()
mod_mboost <- mboost(formula, data = data_train,control = boost_control(mstop=mstop(cv_mb),nu=0.1))
t2=Sys.time()
sigma2hat_mb=sd(y-fitted(mod_mboost))
sigmahat_mb <- sqrt(sigma2hat_mb)
results[ind_start_new_res+5,"sigma2"]=sigma2hat_mb
# sigma2hat_mb=tau2hat_mb*lambda*summary(mod_mboost)$selprob[paste0("brandom(group, df = NULL, lambda = ",lambda,")")]*mstop(cv_mb)
# results[ind_start_new_res+5,c("sigma2_1","sigma2")]=sqrt(c(sigma2hat_mb,tau2hat_mb))
if(RE_type=="one_way"){
newdata_in_mboost=cbind(data.frame(y=rep(NA,dim(X_test_in)[1]),group=factor(rep(1,dim(X_test_in)[1]),levels=levels(factor(group)))),X_test_in)
names(newdata_in_mboost)[3:dim(newdata_in_mboost)[2]]=varnames
f_pred_in = predict(mod_mboost,newdata=newdata_in_mboost)-coef(mod_mboost)[[1]][1]##subtract value of first R
b_pred = coef(mod_mboost)[[1]][as.integer(as.character(unique(group_test_in)))]
newdata_out_mboost=cbind(data.frame(y=rep(NA,dim(X_test_in)[1]),group=factor(rep(1,dim(X_test_in)[1]),levels=levels(factor(group)))),X_test_out)
names(newdata_out_mboost)[3:dim(newdata_out_mboost)[2]]=varnames
y_pred_out = as.vector(predict(mod_mboost,newdata=newdata_out_mboost)-coef(mod_mboost)[[1]][1])##subtract value of first R
}else if(RE_type=="spatial"){
f_pred_in = rep(NA,n)
b_pred = rep(NA,n)
y_pred_out = rep(NA,n)
}
results[ind_start_new_res+5,"Method"]="mboost"
results[ind_start_new_res+5,"time"]=as.numeric(t2-t1, units = "secs")
pred_mb = as.vector(predict(mod_mboost,newdata=newdata_in))
results[ind_start_new_res+5,"RMSE"]=sqrt(mean((y_test_in-pred_mb)^2))
results[ind_start_new_res+5,"CRPS"]=mean(crps(y=y_test_in, family="normal",mean=pred_mb,sd=rep(sigmahat_mb,length(y_test_in))))
results[ind_start_new_res+5,"RMSE_F"]=sqrt(mean((f_test_in-f_pred_in)^2))
results[ind_start_new_res+5,"RMSE_b"]=sqrt(mean((b_in-b_pred)^2))
results[ind_start_new_res+5,"RMSE_new"]=sqrt(mean((y_test_out-y_pred_out)^2))
if(RE_type=="one_way") results[ind_start_new_res+5,"CRPS_new"]=mean(crps(y=y_test_out, family="normal",mean=y_pred_out,sd=rep(sigmahat_mb,length(y_test_out))))
results[ind_start_new_res+5,"M"] = mstop(cv_mb)
# sd(coef(mod_mboost)[[1]])
print("********** mboost finshed ********** ")
}
################
## RE-EM tree ##
################
if(run_which[6] & RE_type=="one_way"){
formula = as.formula(paste0("y~",paste(varnames, collapse = '+'),""))
t1=Sys.time()
REEM_model <- REEMtree(formula, data=data_train, random=~1|group,cv=TRUE)
t2=Sys.time()
results[ind_start_new_res+6,c("sigma2_1","sigma2")]=c(REEM_model$BetweenMatrix,REEM_model$ErrorVariance)
results[ind_start_new_res+6,"Method"]="REEMtree"
results[ind_start_new_res+6,"time"]=as.numeric(t2-t1, units = "secs")
newdata=cbind(data.frame(y=y,group=factor(group)),X_test_in)
names(newdata)[3:dim(newdata)[2]]=varnames
pred_reem = predict(REEM_model,newdata=newdata,id=newdata$group)
Z_mean=as.matrix(t(lme4::lFormula(formula=y ~ 1 + (1 | group),data=newdata)$reTrms$Zt))
cov_REEM = REEM_model$BetweenMatrix[1]*Z_mean%*%t(Z_mean)+diag(REEM_model$ErrorVariance,length(y_test_in))
newdata_noRE=cbind(data.frame(y=rep(NA,dim(X_test_in)[1]),group=factor(rep(-999,dim(X_test_in)[1]))),X_test_in)
names(newdata_noRE)[3:dim(newdata_noRE)[2]]=varnames
f_pred_in = predict(REEM_model,newdata=newdata_noRE,id=factor(c(-1,rep(-999,dim(X_test_in)[1]-1))))
y_pred_out = predict(REEM_model,newdata=newdata_out,id=newdata_out$group)
b_pred=REEM_model$RandomEffects[[1]][as.integer(as.character(unique(group_test_in)))]
results[ind_start_new_res+6,"RMSE"]=sqrt(mean((y_test_in-pred_reem)^2))
results[ind_start_new_res+6,"CRPS"]=mean(crps(y=y_test_in, family="normal",mean=pred_reem,sd=rep(sqrt(REEM_model$ErrorVariance),length(y_test_in))))
results[ind_start_new_res+6,"RMSE_F"]=sqrt(mean((f_test_in-f_pred_in)^2))
results[ind_start_new_res+6,"RMSE_b"]=sqrt(mean((b_in-b_pred)^2))
results[ind_start_new_res+6,"RMSE_new"]=sqrt(mean((y_test_out-y_pred_out)^2))
results[ind_start_new_res+6,"CRPS_new"]=mean(crps(y=y_test_out, family="normal",mean=y_pred_out,sd=sqrt(diag(cov_REEM))))
print("********** REEMtree finshed ********** ")
}
##########
## MERF ##
##########
if(run_which[7]){
save_MERF(path=path_merf_data,group=group,group_test_in=group_test_in,X=X,
X_test_in=X_test_in,X_test_out=X_test_out,y=y,seed=isim,
max_depth=opt_params[opt_params$model=="merf","max_depth"],
n_estimators=opt_params[opt_params$model=="merf","ntree"],
max_features=opt_params[opt_params$model=="merf","max_features"])
Sys.sleep(1)
source_python(paste0(path_merf,"fit_pred_v2_merf.py"))
Sys.sleep(1)
# repl_python()
# group = pd.Series(r.group)
# X = pd.DataFrame(r.X)
# y = pd.Series(r.y)
# X_test = pd.DataFrame(r.X_test_in)
# group_test = group-999999
# Z = np.ones(shape=(n,1))
# max_iterations=50
#
# start = time.time()
# merf = MERF(max_iterations=max_iterations)
# merf.fit(X, Z, group, y)
# end = time.time()
# time_merf=(end-start)
#
# tau2_hat_merf=merf.sigma2_hat_history[max_iterations]
# sigma2_hat_merf=merf.D_hat_history[max_iterations][0][0]
# pred_merf = merf.predict(X_test, Z, group)
# pred_F_merf = merf.predict(X_test, Z, group_test)
# #merf.gll_history
# exit
Z_mean=as.matrix(t(lme4::lFormula(formula=y ~ 1 + (1 | group),data=newdata)$reTrms$Zt))
cov_MERF = sigma2_hat_merf*Z_mean%*%t(Z_mean)+diag(tau2_hat_merf,length(y_test_in))
pred_merf <- as.vector(pred_merf)
y_pred_out_merf <- as.vector(y_pred_out_merf)
results[ind_start_new_res+7,c("sigma2_1","sigma2")]=c(sigma2_hat_merf,tau2_hat_merf)
results[ind_start_new_res+7,"Method"]="MERF"
results[ind_start_new_res+7,"time"]=time_merf
results[ind_start_new_res+7,"RMSE"]=sqrt(mean((y_test_in-pred_merf)^2))
results[ind_start_new_res+7,"CRPS"]=mean(crps(y=y_test_in, family="normal",mean=pred_merf,sd=rep(sqrt(tau2_hat_merf),length(y_test_in))))
results[ind_start_new_res+7,"RMSE_F"]=sqrt(mean((f_test_in-pred_F_merf)^2))
results[ind_start_new_res+7,"RMSE_b"]=sqrt(mean((b_in-pred_b_merf[[1]])^2))
results[ind_start_new_res+7,"RMSE_new"]=sqrt(mean((y_test_out-y_pred_out_merf)^2))
results[ind_start_new_res+7,"CRPS_new"]=mean(crps(y=y_test_out, family="normal",mean=y_pred_out_merf,sd=sqrt(diag(cov_MERF))))
results[ind_start_new_res+7,"RMSE_F"]=sqrt(mean((f_test_in-pred_F_merf)^2))
results[ind_start_new_res+7,"RMSE_b"]=sqrt(mean((b_in-pred_b_merf[[1]])^2))
print("********** MERF finshed ********** ")
}
################
## boostmtree ## Not possible to use since it assumes features x that are constant over time!
################
# if(RE_type=="one_way"){
#   t1=Sys.time()
#   boostm <- boostmtree(x=data.frame(X), tm=rep(1:(n/m),m), id=group, y=y, M = 1000, cv.flag = TRUE, nu = 0.01, K=maxdepth, d=0, nknots=0, importance = TRUE)
#   t2=Sys.time()
#   rho=boostm$rho[boostm$Mopt]
#   phi=boostm$phi[boostm$Mopt]
#   sigma2hat_bmt=rho*phi
#   tau2hat_bmt=phi-sigma2hat_bmt
#   results[ind_start_new_res+5,c("sigma2_1","sigma2")]=sqrt(c(sigma2hat_bmt,tau2hat_bmt))
#   results[ind_start_new_res+5,"Method"]="boostmtree"
#   results[ind_start_new_res+5,"time"]=as.numeric(t2-t1, units = "secs")
#   options(mc.cores = 1)
#   pred_bmt = predict(boostm,x=data.frame(X_test_in), tm=rep(1:(n/m),m), id=group)
#   pred_bmt$muhat
#   results[ind_start_new_res+5,"RMSE"]=sqrt(mean((y_test_in-predict(xgb, Xb_test_in))^2))
#   results[ind_start_new_res+5,"RMSE_F"]=sqrt(mean((f_test_in-predict(xgb, Xb_test_in2))^2))
# }
############################
## Out-of-sample prediction of mean: confidence intervall and quantile
############################
print("Simulation study for CI and quantile starting")
set.seed(isim+9999)
res_cov_quant_gpb = res_cov_quant_MERF = res_cov_quant_REEM = res_cov_quant_Boost = res_cov_quant_F_linear = res_cov_quant_F_known = res_cov_quant_mboost = res_cov_quant = rep(0,5)
if(RE_type=="one_way"){
sim=sim_one_way_RE(n=nsample_test_out,m=m_test_out,sigma2_1=sigma2_1,sigma2=sigma2,meanF=sim_F,test_in=FALSE,test_out=FALSE)
group_test_out=factor(paste0("out_",sim$group))
X_test_1 = cbind(rep(1,dim(sim$X)[1]),sim$X)
data_test_out=data.frame(y=1:nsample_test_out,group=group_test_out)
Z_mean=as.matrix(t(lme4::lFormula(formula=y ~ 1 + (1 | group),data=data_test_out)$reTrms$Zt))
if(run_which[1]) cov_mb=model_MB$predict(X_pred=sim$X,group_data_pred=group_test_out,coords_pred=coords_test_out,pred_mean=FALSE,pred_covariance=TRUE)$cov
if(run_which[8]) cov_gpb=predict(gpb_model, sim$X,group_data_pred=group_test_out,gp_coords_pred=coords_test_out,predict_cov_mat=TRUE)$random_effect_cov
if(run_which[2]) cov_F_known = gp_model_F_known$predict(group_data_pred=group_test_out,gp_coords_pred=coords_test_out,predict_cov_mat=TRUE)$co
if(run_which[3]) cov_lin = gp_model_F_linear$predict(X_pred = X_test_1, group_data_pred=group_test_out,gp_coords_pred=coords_test_out,predict_cov_mat=TRUE)$cov
# if(run_which[3]) cov_lin = par_est_F_linear[2]^2*Z_mean%*%t(Z_mean)+diag(par_est_F_linear[1]^2,nsample_test_out)
if(run_which[4]) cov_Boost=diag(sigmahatBoost^2,nsample_test_out)
if(run_which[5]) cov_mboost=diag(sigmahat_mb^2,nsample_test_out)
if(run_which[6]) cov_REEM = REEM_model$BetweenMatrix[1]*Z_mean%*%t(Z_mean)+diag(REEM_model$ErrorVariance,nsample_test_out)
if(run_which[7]) cov_MERF = sigma2_hat_merf*Z_mean%*%t(Z_mean)+diag(tau2_hat_merf,nsample_test_out)
}else if(RE_type=="spatial"){
gp_id_pred=rep(n_gp_ids+1,nsample_test_out)
}
for(ii in 1:Nsim_test_out){
print_output=FALSE
if(RE_type=="one_way"){
simi=sim_one_way_RE(n=nsample_test_out,m=m_test_out,sigma2_1=sigma2_1,sigma2=sigma2,meanF=sim_F,test_in=FALSE,test_out=FALSE,Xselection="subset")
if(run_which[1]) pred=model_MB$predict(X_pred=simi$X,group_data_pred=group_test_out,coords_pred=coords_test_out,pred_mean=TRUE,pred_covariance=FALSE)
if(run_which[8]) pred_gpb <- predict(gpb_model, simi$X,group_data_pred=group_test_out,gp_coords_pred=coords_test_out,predict_cov_mat=FALSE)$fixed_effect
if(run_which[3]){
y_pred_lin = gp_model_F_linear$predict(X_pred = cbind(rep(1,dim(simi$X)[1]),simi$X), group_data_pred=group_test_out,gp_coords_pred=coords_test_out,predict_cov_mat=FALSE)$mu
}
##Design matrix for XGBoost (need to have the same design matrix as in fitted model)
# if(run_which[4])
if(run_which[4]){
if(one_hot_dummy){
Xb_test_out1 = cbind(simi$X,matrix(NA,ncol=length(unique(group)),nrow=nsample_test_out))
colnames(Xb_test_out1)=NULL
}else{
Xb_test_out1 = cbind(rep(NA,nsample_test_out),simi$X)
}
}
if(run_which[6]){##REEM tree
pred_reem = predict(REEM_model,newdata=newdata,id=newdata$group)
res_cov_quant_REEM = res_cov_quant_REEM + eval_mean_pred_sim(print=print_output,pred=pred_reem,cov=cov_REEM,y=simi$y,p_quant=p_quant)
}
if(run_which[7]){
save_MERF(path=path_merf_data,group=paste0("out_",simi$group),X=simi$X)
Sys.sleep(0.5)
source_python(paste0(path_merf,"predict_merf.py"))
Sys.sleep(0.5)
res_cov_quant_MERF = res_cov_quant_MERF + eval_mean_pred_sim(print=print_output,pred=y_pred_merf,cov=cov_MERF,y=simi$y,p_quant=p_quant)
}
}else if(RE_type=="spatial"){
simi=sim_spat(n=nsample_test_out,sigma2_1=sigma2_1,rho=rho,sigma2=sigma2,meanF=sim_F,test_in=FALSE,test_out=FALSE,Xselection="subset")
coords_test_out=simi$coords
if(run_which[1]){
cov_mb = get_cov_pred_spat(pars=c(model_MB$pars[1],model_MB$pars[1]*model_MB$pars[2],1/model_MB$pars[3]),coords_pred=coords_test_out)
pred=model_MB$predict(X_pred=simi$X,group_data_pred=group_test_out,coords_pred=coords_test_out,gp_id_pred=gp_id_pred,pred_mean=TRUE,pred_covariance=FALSE)
}
if(run_which[8]){
pred_all_gpb = predict(gpb_model, simi$X,group_data_pred=group_test_out,gp_coords_pred=coords_test_out,
predict_cov_mat=TRUE,cluster_ids_pred = gp_id_pred)
cov_gpb=pred_all_gpb$random_effect_cov
pred_gpb <- pred_all_gpb$fixed_effect
}
if(run_which[2]) cov_F_known = gp_model_F_known$predict(group_data_pred=group_test_out,gp_coords_pred=coords_test_out,predict_cov_mat=TRUE,cluster_ids_pred = gp_id_pred)$cov
if(run_which[3]){
pred_all_linear <- gp_model_F_linear$predict(X_pred = cbind(rep(1,dim(simi$X)[1]),simi$X), group_data_pred=group_test_out,
gp_coords_pred=coords_test_out,predict_cov_mat=TRUE,cluster_ids_pred = gp_id_pred)
cov_lin=pred_all_linear$cov
y_pred_lin <- pred_all_linear$mu
}
if(run_which[4]){
# Xb_test_out=cbind(rep(NA,nsample_test_out),rep(NA,nsample_test_out),simi$X)
# colnames(Xb_test_out)=c("s_x","s_y",varnames)
Xb_test_out1 = cbind(simi$X,matrix(NA,ncol=2,nrow=nsample_test_out))
cov_Boost=diag(sigmahatBoost^2,nsample_test_out)
}
}
if(RE_type=="one_way" & run_which[5]){
newdata_out_mboost=cbind(data.frame(y=rep(NA,nsample_test_out),group=factor(rep(1,nsample_test_out),levels=levels(factor(group)))),simi$X)
names(newdata_out_mboost)[3:dim(newdata_out_mboost)[2]]=varnames
y_pred_mb = as.vector(predict(mod_mboost,newdata=newdata_out_mboost)-coef(mod_mboost)[[1]][1])
res_cov_quant_mboost = res_cov_quant_mboost + eval_mean_pred_sim(print=print_output,pred=y_pred_mb,cov=cov_mboost,y=simi$y,p_quant=p_quant)
}
if(run_which[1]) res_cov_quant = res_cov_quant + eval_mean_pred_sim(print=print_output,pred=pred$FE_pred,cov=cov_mb,y=simi$y,p_quant=p_quant)
if(run_which[8]) res_cov_quant_gpb = res_cov_quant_gpb + eval_mean_pred_sim(print=print_output,pred=pred_gpb,cov=cov_gpb,y=simi$y,p_quant=p_quant)
if(run_which[2]) res_cov_quant_F_known = res_cov_quant_F_known + eval_mean_pred_sim(print=FALSE,pred=simi$f,cov=cov_F_known,y=simi$y,p_quant=p_quant)
if(run_which[3]) res_cov_quant_F_linear = res_cov_quant_F_linear + eval_mean_pred_sim(print=print_output,pred=y_pred_lin,cov=cov_lin,y=simi$y,p_quant=p_quant)
##Tree boosting
if(run_which[4]){
# y_pred_Boost = predict(xgb, Xb_test_out)
y_pred_Boost = predict(boost_model, Xb_test_out1)
res_cov_quant_Boost = res_cov_quant_Boost + eval_mean_pred_sim(print=print_output,pred=y_pred_Boost,cov=cov_Boost,y=simi$y,p_quant=p_quant)
}
}
if(run_which[1]) results[ind_start_new_res+1,c("RMSE_mean","CRPS_mean","coverage","quant_loss","int_score")] = res_cov_quant/Nsim_test_out
if(run_which[2]) results[ind_start_new_res+2,c("RMSE_mean","CRPS_mean","coverage","quant_loss","int_score")] = res_cov_quant_F_known/Nsim_test_out
if(run_which[3]) results[ind_start_new_res+3,c("RMSE_mean","CRPS_mean","coverage","quant_loss","int_score")] = res_cov_quant_F_linear/Nsim_test_out
if(run_which[4]) results[ind_start_new_res+4,c("RMSE_mean","CRPS_mean","coverage","quant_loss","int_score")] = res_cov_quant_Boost/Nsim_test_out
if(run_which[5] & RE_type=="one_way") results[ind_start_new_res+5,c("RMSE_mean","CRPS_mean","coverage","quant_loss","int_score")] = res_cov_quant_mboost/Nsim_test_out
if(run_which[6]) results[ind_start_new_res+6,c("RMSE_mean","CRPS_mean","coverage","quant_loss","int_score")] = res_cov_quant_REEM/Nsim_test_out
if(run_which[7]) results[ind_start_new_res+7,c("RMSE_mean","CRPS_mean","coverage","quant_loss","int_score")] = res_cov_quant_MERF/Nsim_test_out
if(run_which[8]) results[ind_start_new_res+8,c("RMSE_mean","CRPS_mean","coverage","quant_loss","int_score")] = res_cov_quant_gpb/Nsim_test_out
results[ind_start_new_res+1:nmethod,"RMSE_mean"]=sqrt(results[ind_start_new_res+1:nmethod,"RMSE_mean"])##take the square root from the MSE
print(paste0("Finished simulation number ", isim))
cat("\n")
##################
## Plot results ##
##################
colnames_sum = c(parnames,"RMSE","CRPS","RMSE_F","RMSE_b","RMSE_new","CRPS_new",
"RMSE_mean","CRPS_mean","coverage","quant_loss","int_score","M","time","Method")
results=results[!is.na(results$Method),]
sumdata=tidyr::gather(results[,colnames_sum],Parameter,Value,-Method)##names(results)!="iteration"
sumdata$Parameter = factor(sumdata$Parameter,levels=colnames(results))
data_true <- data.frame(Parameter = colnames(results)[1:(npars)], Value = c(par_true))
p=ggplot(data = sumdata, aes(y=Value,x=Method))+ geom_boxplot()+facet_wrap(~Parameter,scales=c("free_y"))+
stat_summary(fun.y=mean, colour="darkred", geom="point",shape=18, size=3,show.legend = FALSE)+
ylab("")+geom_hline(data = data_true, aes(yintercept = Value),size=1,linetype=2)+
theme(axis.text.x = element_text(angle = 90, hjust=1,vjust=0.5))+ggtitle(paste0("Nb. sim: ",isim))#+scale_y_continuous(trans='log10')
width=8
write.csv(results,file=paste0(path_sim,"results/",filename,".csv"),row.names=FALSE)
ggsave(p,file=paste0(path_sim,"plots/",filename,".jpeg"),height=width,width=1.2*width)
plot(p)
}
}
}
path_rpckg="/Users/whsigris/Dropbox/HSLU/Projects/MixedBoost/Code/"
# path_rpckg="/Users/kti.projekt/Downloads/"
source(paste0(path_rpckg,"functions.R"))
source(paste0(path_rpckg,"RE_models.R"))
source(paste0(path_rpckg,"RE_components.R"))
source(paste0(path_rpckg,"Simulation_functions.R"))
library(lme4)
library(gpboost)
setwd("C:/Users/whsigris/Dropbox/HSLU/Projects/MixedBoost/GPBoost/R-package/demo")
